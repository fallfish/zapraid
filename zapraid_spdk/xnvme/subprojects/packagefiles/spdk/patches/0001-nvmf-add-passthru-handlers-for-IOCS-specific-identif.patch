From d3d92a3375231a1fddf64e548affcf6301364da5 Mon Sep 17 00:00:00 2001
From: "Ivan L. Picoli" <i.picoli@samsung.com>
Date: Tue, 16 Jun 2020 20:58:31 +0200
Subject: [PATCH 1/8] nvmf: add passthru handlers for IOCS specific identify
 [rfc]

Signed-off-by: Ivan L. Picoli <i.picoli@samsung.com>
Change-Id: I5db2c902e6513acec05498849c6c4add0da3ac1d
---
 lib/nvmf/ctrlr.c | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/lib/nvmf/ctrlr.c b/lib/nvmf/ctrlr.c
index fe0c23e81..644313aeb 100644
--- a/lib/nvmf/ctrlr.c
+++ b/lib/nvmf/ctrlr.c
@@ -451,16 +451,18 @@ nvmf_ctrlr_create(struct spdk_nvmf_subsystem *subsystem,
 			SPDK_ERRLOG("Listener was not found\n");
 			goto err_listener;
 		}
 	}
 
 	req->qpair->ctrlr = ctrlr;
 	spdk_thread_send_msg(subsystem->thread, _nvmf_subsystem_add_ctrlr, req);
 
+	spdk_nvmf_set_passthru_admin_cmd(SPDK_NVME_OPC_IDENTIFY, 1);
+
 	return ctrlr;
 err_listener:
 	spdk_bit_array_free(&ctrlr->qpair_mask);
 err_qpair_mask:
 	free(ctrlr);
 	return NULL;
 }
 
@@ -2695,18 +2697,20 @@ nvmf_ctrlr_identify(struct spdk_nvmf_request *req)
 
 	if (subsystem->subtype == SPDK_NVMF_SUBTYPE_DISCOVERY &&
 	    cns != SPDK_NVME_IDENTIFY_CTRLR) {
 		/* Discovery controllers only support Identify Controller */
 		goto invalid_cns;
 	}
 
 	switch (cns) {
+	case SPDK_NVME_IDENTIFY_NS_IOCS:
 	case SPDK_NVME_IDENTIFY_NS:
 		return spdk_nvmf_ctrlr_identify_ns(ctrlr, cmd, rsp, req->data);
+	case SPDK_NVME_IDENTIFY_CTRLR_IOCS:
 	case SPDK_NVME_IDENTIFY_CTRLR:
 		return spdk_nvmf_ctrlr_identify_ctrlr(ctrlr, req->data);
 	case SPDK_NVME_IDENTIFY_ACTIVE_NS_LIST:
 		return nvmf_ctrlr_identify_active_ns_list(subsystem, cmd, rsp, req->data);
 	case SPDK_NVME_IDENTIFY_NS_ID_DESCRIPTOR_LIST:
 		return nvmf_ctrlr_identify_ns_id_descriptor_list(subsystem, cmd, rsp, req->data, req->length);
 	default:
 		goto invalid_cns;
@@ -3139,23 +3143,42 @@ nvmf_ctrlr_process_admin_cmd(struct spdk_nvmf_request *req)
 			break;
 		default:
 			goto invalid_opcode;
 		}
 	}
 
 	/* Call a custom adm cmd handler if set. Aborts are handled in a different path (see nvmf_passthru_admin_cmd) */
 	if (g_nvmf_custom_admin_cmd_hdlrs[cmd->opc].hdlr && cmd->opc != SPDK_NVME_OPC_ABORT) {
+		/* Passthru for I/O Command Set specific identify only */
+		if (cmd->opc == SPDK_NVME_OPC_IDENTIFY) {
+			switch (cmd->cdw10_bits.identify.cns) {
+			case SPDK_NVME_IDENTIFY_NS_IOCS:
+			case SPDK_NVME_IDENTIFY_CTRLR_IOCS:
+			case SPDK_NVME_IDENTIFY_ACTIVE_NS_LIST_IOCS:
+			case SPDK_NVME_IDENTIFY_ALLOCATED_NS_LIST_IOCS:
+			case SPDK_NVME_IDENTIFY_NS_ALLOCATED_IOCS:
+			case SPDK_NVME_IDENTIFY_IOCS:
+			case SPDK_NVME_IDENTIFY_NS:
+				break;
+
+			default:
+				goto not_iocs_idfy;
+			}
+		}
+
 		rc = g_nvmf_custom_admin_cmd_hdlrs[cmd->opc].hdlr(req);
 		if (rc >= SPDK_NVMF_REQUEST_EXEC_STATUS_COMPLETE) {
 			/* The handler took care of this commmand */
 			return rc;
 		}
 	}
 
+not_iocs_idfy:
+
 	switch (cmd->opc) {
 	case SPDK_NVME_OPC_GET_LOG_PAGE:
 		return nvmf_ctrlr_get_log_page(req);
 	case SPDK_NVME_OPC_IDENTIFY:
 		return nvmf_ctrlr_identify(req);
 	case SPDK_NVME_OPC_ABORT:
 		return nvmf_ctrlr_abort(req);
 	case SPDK_NVME_OPC_GET_FEATURES:
-- 
2.30.2

